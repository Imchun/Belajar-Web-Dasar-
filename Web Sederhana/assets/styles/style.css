@import url('https://fonts.googleapis.com/css?family=Quicksand:400,700&display=swap');

header{
   display: inline;
}
 
body {
   font-family: 'Quicksand', sans-serif;
   margin: 0;
   padding: 0;
 }

 nav a {
   font-size: 18px;
   font-weight: 400;
   text-decoration: none;
}

nav a:hover {
   font-weight: bold;
}

main {
   padding: 20px;
   overflow: auto; /*Hal tersebut disebabkan nilai elemen <main> sekarang memiliki tinggi 0px. 
   Di mana #content dan elemen <aside> dianggap tidak ada, sehingga elemen <footer> akan naik mengisi ruang yang kosong. 
   Agar #content dan elemen <aside> dianggap ada oleh <main> (sebagai induk elemennya)
   kita perlu tetapkan nilai overflow: auto; pada main.*/
 }

 h2 {
    color: #00a2c6;
 }
  
 h3 {
    color: #00a2c6;
 }

 .profile header {
   text-align: center;
}
.Head_Table{
   font-weight: bold;
}
footer {
   padding: 20px;
   color: white;
   background-color: #00a2c6;
   text-align: center;
   font-weight: bold;
}

.featured-image {
   width: 100%;
   max-height: 300px;
   object-fit: cover;
   object-position: center;
}

.profile img {
   width: 200px;
}

.card {
   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
   border-radius: 5px;
   padding: 20px;
}

.jumbotron {
   padding: 60px;
   background-color: #00c8eb;
   text-align: center;
   font-size: 20px;
   color: white;
 }

 nav li {
   display: inline;
   list-style-type: none;
   margin-right: 20px;
 }

 nav {
   background-color: #00a2c6;
   padding: 5px;
   position: sticky;
   top: 0;
 }

 nav a {
   font-size: 18px;
   font-weight: 400;
   text-decoration: none;
   color: white;
 }

 #content {
   float: left;
   width: 75%;
 }

 aside {
   float: right;
   width: 25%;
   padding-left: 20px;
 }

 * {
   box-sizing: border-box;
   /*
   Ups, elemen <aside> sekarang berada di bawah #content karena dengan menambahkan padding pada <aside>, lebar elemen sudah bukan 25% lagi.

   Untuk mengatasinya kita bisa ubah tipe pengukuran untuk dimensi kotaknya. Masih ingat kan materi tentang box-sizing? Dengan menerapkan nilai border-box pada properti box-sizing, kita dapat menentukan dimensi kotak dengan tepat, tanpa dipengaruhi oleh padding dan border. 

   Mari kita tetapkan pengukuran box-sizing untuk seluruh elemen HTML dengan menggunakan selector * seperti berikut:*/
 }

 @media screen and (max-width: 1000px) {
   #content,
   aside {
     width: 100%;
     padding: 0;
   }
 }

 /* Rule yang dituliskan dalam block @media di bawah akan diterapkan pada device yang memiliki ukuran viewport di bawah 992px */
/*@media screen and (max-width: 992px) {
    .....
 } */
  
 /* Rule yang dituliskan dalam block @media di bawah akan diterapkan pada device yang memiliki ukuran viewport di bawah 600px */
 /*@media screen and (max-width: 600px) {
    ..... 
 }*/


 /*
 Anda bisa membaca artikel yang ada pada blog kami atau bisa membaca dokumentasi yang diberikan oleh Google mengenai ini.
 https://www.dicoding.com/blog/dasar-tampilan-responsif-pada-website/
 https://developers.google.com/web/fundamentals/design-and-ux/responsive
 */

 
/*
 Memperbaiki CSS
Terdapat banyak cara dan best practice dalam memperbaiki CSS yang telah Anda tulis. Salah satu cara yang mudah dan cepat dilakukan adalah dengan menggunakan tools untuk otomatis mencari kesalahan pada penulisan.

Mencari Kesalahan CSS
Salah satu cara yang paling cepat untuk memastikan bahwa CSS yang telah Anda tulis itu valid dan dapat berjalan adalah menggunakan berbagai tools online yang tersedia secara gratis. Pengecekan cukup dengan cara copy-paste kode CSS, upload berkas CSS, atau menulis alamat situs yang ingin diperiksa.

Berikut beberapa opsi gratis yang tersedia.

https://jigsaw.w3.org/css-validator/
https://codebeautify.org/cssvalidate
http://csslint.net/

 

Kecilkan Ukuran CSS
Ukuran CSS sangat penting untuk dapat dihemat karena akan mempengaruhi seberapa cepat situs Anda dapat dimuat pada browser. Cara untuk menghemat ukuran berkas CSS adalah dengan menghapus spasi atau karakter yang tidak diperlukan dari kode. Berikut contoh spasi atau karakter yang dapat dihapus:

New line characters (Baris baru)
Whitespace characters (Spasi)
Block delimiters (Pembatas block)
CSS comments (Komentar CSS)

Perbaikan di atas dapat dilakukan secara manual namun Anda juga dapat menggunakan tools online yang dapat memperbaiki secara otomatis. Berikut beberapa opsi yang tersedia.

https://cssnano.co/playground/
https://cssminifier.com/
https://www.minifier.org/
*/